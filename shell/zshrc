source ~/dotfiles/shell/shell_common.sh

fpath=(~/.config/zsh/completion $fpath) # User local fpath

# Paths
set-path() {
    if [[ -d $1 ]]; then
        path=($1 $path)
    fi
}
set-path ~/miniconda3/bin

bindkey -e

HISTFILE=~/.history
readonly local shared_hist_file=~/share/share-configs/home/dotfiles/history
if [[ -f $shared_hist_file ]]; then
    HISTFILE=$shared_hist_file
fi
HISTSIZE=50000
SAVEHIST=50000
setopt hist_ignore_dups          # Don't record an entry that was just recorded again.
setopt bang_hist                 # Treat the '!' character specially during expansion.
setopt extended_history          # Write the history file in the ":start:elapsed;command" format.
setopt hist_expire_dups_first    # Expire duplicate entries first when trimming history.
setopt hist_ignore_space         # Don't record an entry starting with a space.
setopt hist_save_no_dups         # Don't write duplicate entries in the history file.
setopt hist_reduce_blanks        # Remove superfluous blanks before recording entry.
setopt inc_append_history        # Immediately append to the history file, not just when a term is killed
setopt append_history            # Append history to the history file (no overwriting)
setopt share_history             # Share history across sessions
unsetopt beep                    # No bell
zstyle :compinstall filename '~/.zshrc'

DIRSTACKSIZE=100
disable r

# Enable cdr, add-zsh-hook
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs

# cdr
zstyle ':completion:*' recent-dirs-insert both
zstyle ':chpwd:*' recent-dirs-max 500
zstyle ':chpwd:*' recent-dirs-default true

# History
bindkey "^r" history-incremental-pattern-search-backward
bindkey "^s" history-incremental-pattern-search-forward
autoload -Uz history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^n" history-beginning-search-forward-end
bindkey "^p" history-beginning-search-backward-end

autoload -Uz edit-command-line
zle -N edit-command-line
bindkey '^f' edit-command-line

# execution without the command
alias -s rb='ruby'
alias -s py='python'
alias -s php='php -f'

setopt print_eight_bit
setopt globdots
# correct spell
setopt correct
setopt AUTO_PUSHD
# enable comments in interactive terminal
setopt interactivecomments

autoload -Uz colors; colors

# completions
zstyle ':completion:*' menu select=2
zstyle ':completion:*' verbose yes
zstyle ':completion:*' completer _ssh _complete _match _approximate _prefix _list _expand _history
zstyle ':completion:*:messages' format ${fg_bold[yellow]}'%d'${reset_color}
zstyle ':completion:*:warnings' format ${fg[red]}'No matches for:'${fg[yellow]}' %d'${reset_color}
zstyle ':completion:*:descriptions' format ${fg[yellow]}'%B%d%b'${reset_color}
zstyle ':completion:*:corrections' format ${fg_bold[yellow]}'%B%d '${fg[red]}'(errors: %e)%b'${reset_color}
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' use-cache true
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:cd:*' ignore-parents parent pwd
zstyle ':completion:*:*files' ignored-patterns '*?.o' '*?~' '*\#'
export LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:';
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# ----- Pre command -----

function __update_theme () {
    if [[ $THEME_MODE == "light" ]]; then
        export DELTA_FEATURES='+light'
        export BAT_THEME=OneHalfLight
        local kitty_theme_file='light.conf'
        export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS_PRE' --color=fg:-1,bg:-1,hl:#3465a4 --color=fg+:#000000,bg+:#eeeeec,hl+:#17498c --color=info:#92968e,prompt:#cc0000,pointer:#dbb300 --color=marker:#4e9a06,spinner:#75507b,header:#06989a'
    else
        export DELTA_FEATURES='+dark'
        export BAT_THEME=OneHalfDark
        local kitty_theme_file='dark.conf'
        export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS_PRE' --color=fg:-1,bg:-1,hl:#6099c0 --color=fg+:#d0d0d0,bg+:#3d3839,hl+:#61abda --color=info:#bbbbbb,prompt:#de6e7c,pointer:#d68c67 --color=marker:#8bae68,spinner:#b279a7,header:#66a5ad'
    fi
    if [[ $TERM == "xterm-kitty" ]]; then
        kitten @ set-colors --all "~/.config/kitty/themes/${kitty_theme_file}"
    fi
}

function __update_theme_mode () {
    # Set theme mode based on time
    local now=$(date +%H)
    local new_theme_mode=""
    if [[ $now -ge 20 || $now -lt 7 ]]; then
        new_theme_mode="dark"
    else
        new_theme_mode="light"
    fi

    # Set theme if changed
    if [[ $THEME_MODE != $new_theme_mode ]]; then
        export THEME_MODE=$new_theme_mode
        __update_theme
    fi
}
autoload -Uz add-zsh-hook
add-zsh-hook precmd __update_theme_mode

# ----- PROMPT -----

prompt_symbol() {
    # check_last_exit_code
    if [[ $? -eq 0 ]]; then
        echo ">"
    else
        echo "%{$fg[red]%}>%{$reset_color%}"
    fi
}

if [[ -n $SSH_CONNECTION || -f /.dockerenv ]] || { [[ -r /proc/1/environ ]] && grep -qa container=lxc /proc/1/environ; } ; then
    export SSH_OR_CONTAINER=1
    user_and_host_name=$USER@$HOST
fi

PROMPT=$'\n${fg[blue]}%~${reset_color} ${vcs_info_msg_0_} ${user_and_host_name}\n$(prompt_symbol) '

setopt prompt_subst # evaluate prompt every time
autoload -Uz vcs_info
zstyle ':vcs_info:git:*' check-for-changes true
zstyle ':vcs_info:git:*' stagedstr "%F{yellow}!"
zstyle ':vcs_info:git:*' unstagedstr "%F{red}+"
zstyle ':vcs_info:*' formats "%F{green}%c%u%b%f"
zstyle ':vcs_info:*' actionformats "%F{green}%c%u%b|%a%f"
precmd () { vcs_info }

# ----- Functions ------

## Definition search
DEFINITION_LIST=""
DEFINITION_LIST_DELIMITER=" # "
func-desc() {
    DEFINITION_LIST+="$1$DEFINITION_LIST_DELIMITER$2\n"
}

# zmv
autoload -Uz zmv

# Commands using kitten for ssh client
if ! type 'open' > /dev/null; then
    func-desc open "Open a file or URL using xdg-open remotely"
    function open {
        kitten @ launch --type background xdg-open "$@"
    }
fi

# Plugins
if [[ -f ~/.zplug/init.zsh ]]; then
    source ~/.zplug/init.zsh
    #zplug mafredri/zsh-async, from:github
    #zplug sindresorhus/pure, use:pure.zsh, from:github, as:theme
    zplug load

    # Pure theme
    PURE_PROMPT_SYMBOL='>'
    RPROMPT=''
else
    autoload -Uz compinit
    compinit
fi

# fzf
if [[ -f ~/.fzf.zsh ]]; then
    source ~/.fzf.zsh
fi
if type fzf > /dev/null; then
    if [[ -f /usr/share/fzf/key-bindings.zsh ]]; then
        source /usr/share/fzf/key-bindings.zsh
    fi
    if [[ -f /usr/share/fzf/completion.zsh ]]; then
        source /usr/share/fzf/completion.zsh
    fi

    export FZF_DEFAULT_OPTS_PRE='--reverse --bind "ctrl-j:abort,space:toggle+down" --height=50%'
    export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS_PRE"
    export FZF_CTRL_T_OPTS="--preview '~/dotfiles/bin/fzf-preview.sh {} || cat {} || tree -C {}'"
    export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:7:hidden:wrap --bind '?:toggle-preview'"

    ## Definition search
    func-desc def-search "Search custom defined functions and replace the buffer with the function"
    def-search() {
        selection="$(echo -n $DEFINITION_LIST | fzf --preview='. ~/.zshrc && type -f {1}' --expect=tab)"
        key="$(head -1 <<< "$selection")"
        value="$(sed -ne "2 s/$DEFINITION_LIST_DELIMITER.*$// p" <<< "$selection")"

        case $key in
            tab)
                LBUFFER=$(type -f "$value" | sed -e "1 d; $ d; s/^\t//")
                ;;
            *)
                LBUFFER="$value"
                ;;
        esac
    }
    zle -N def-search
    bindkey "^o" def-search

    ## cd
    func-desc pr "Recursive cd"
    function pr {
        local selected_dir=$(find . -type d 2>/dev/null | fzf)
        if [[ -n $selected_dir ]]; then
            cd "${selected_dir}"
        fi
    }
    func-desc ph "cd to a directory of pwd history"
    function ph {
        eval local selected_dir=$(cdr -l | sed -e 's/^[0-9]*\s\+//' | fzf)
        if [[ -n $selected_dir ]]; then
            if [[ -d $selected_dir ]]; then
                cd "${selected_dir}"
            else
                echo "No such a directory: ${selected_dir}.  Deleted."
                cdr -P "${selected_dir}"
                ph
            fi
        fi
    }
    func-desc pg "cd to a directory of ghq list"
    pg() {
        declare -r REPO_NAME="$(ghq list >/dev/null | fzf)"
        [[ -n "${REPO_NAME}" ]] && cd "$(ghq root)/${REPO_NAME}"
    }

    ## git
    func-desc gsw "Switch git branches interactively"
    gsw() {
        major_branches=$(git branch -a -l main master develop | sed 's/^../^/; s/$/\\s/' | sed ':a; N; s/\n/|/; ta')
        all_branches=$(git branch -a -vv | sed 's/^..//')
        cat <(echo "$all_branches" | grep -E "$major_branches") <(echo "$all_branches" | grep -vE "/HEAD\s|$major_branches") | fzf | sed 's/^\([^ ]*\)\s.*$/\1/; s#^remotes/[^/]*/##' | xargs git switch --recurse-submodules
    }

    # completions
    _fzf_complete_pass() {
        _fzf_complete +m -- "$@" < <(
        local prefix
        prefix="${PASSWORD_STORE_DIR:-$HOME/.password-store}"
        command find -L "$prefix" \
            -name "*.gpg" -type f | \
            sed -e "s#${prefix}/\{0,1\}##" -e 's#\.gpg##' -e 's#\\#\\\\#' | sort
        )
    }
fi

if type delta > /dev/null; then
    export GIT_PAGER=delta
fi

if type kitten > /dev/null; then
    alias kssh="kitten ssh"
    alias icat="kitten icat"
    notify() {
        local title="${1:?title}"
        local id=$RANDOM
        if [ -n $2 ]; then
            printf "\x1b]99;i=$id:d=0:p=body;$2\x1b\\"
        fi
        printf "\x1b]99;i=$id:d=1;$1\x1b\\"
    }
fi

# Man page using vim
func-desc vman "Open man page using vim"
vman() {
    if [ -z $1 ]; then
        echo "What manual page do you want?"
        return 1
    fi
    vim "-c Man $1 | only"
}

# Dev Docker
func-desc dev "Start development environment docker continer"
dev() {
    docker run --rm -it diginatu/dev-base:latest
}
func-desc dev-mount "Start development environment docker continer with mounting current directory"
dev-mount() {
    docker run --rm -v "$(pwd):/root/code" -it diginatu/dev-base:latest
}

func-desc xpanes "Execute multiple lines in each tmux panes"
xpanes() {(
    set -e

    declare -a lines; lines=( "${(f@)$(cat)}" )
    echo ${#lines[@]}
    echo ${lines}

    if [ -z "$lines" ]; then
        return 1
    fi
    tmux new-window $lines[1]

    for l in ${lines[@]:1}; do
        tmux split-window -p 100 $l
    done

    tmux select-layout tiled
    tmux set synchronize-panes on
)}

func-desc ghurl "Print github web site URL"
ghurl() {(
    set -e

    origin=$(git ls-remote --get-url origin)
    url="$origin"
    url=$(echo "$origin" | sed -Ee 's#^(git://|ssh://(git@)?)#https://#')
    if [[ "$origin" =~ '^git@' ]]; then
        url=$(echo "$origin" | sed -Ee 's@:@/@' -e 's#git@#https://#')
    fi
    url=${url%\.git}

    echo "$url"
)}

func-desc ghopen "Open github web site"
ghopen() {
    open $(ghurl)
}

func-desc random "Generate random characters"
random() {
    if [[ $# < 1 ]]; then
        echo "Syntax: $0 [number of characters]"
        return 1
    fi
    cat /dev/urandom | LC_ALL=C tr -dc '[:alnum:]' | head -c $1
}

export LOCAL_GHQ_DIR=${HOME}/localghq
func-desc is-ghq-dir "Return if ghq directory"
is-ghq-dir() {
    [[ "$(pwd)" == "$(ghq root)"* ]]
}
func-desc ghq-local-dir "Output local ghq directory"
ghq-local-dir() {(
    set -e

    if ! is-ghq-dir; then
        echo "You are not in ghq directory"
        return 1
    fi
    echo "$LOCAL_GHQ_DIR${"$(pwd)"#"$(ghq root)"}"
)}
func-desc ghq-local-mkdir "Create local ghq directory"
ghq-local-mkdir() {(
    set -e

    p="$(ghq-local-dir)"
    mkdir -p "$p"
    echo Created "$p"
)}
func-desc local-ghq-origdir "Output original ghq directory"
local-ghq-origdir() {(
    set -e

    if [[ "$(pwd)" != "${LOCAL_GHQ_DIR}"* ]]; then
        echo "You are not in local ghq directory"
        return 1
    fi
    echo "$(ghq root)${"$(pwd)"#"$LOCAL_GHQ_DIR"}"
)}
func-desc toggle-ghq-local "Toggle between ghq and local ghq directory"
toggle-ghq-local() {
    if is-ghq-dir; then
        cd "$(ghq-local-dir)"
    else
        cd "$(local-ghq-origdir)"
    fi
}

func-desc tmpd "Move to a new temporary directory"
tmpd() {
    newd="/tmp/$(random 4)"
    mkdir "$newd"
    cd "$newd"
}

func-desc edit-flacs-dir "Edit flac file metadata in current directory"
edit-flacs-dir() {(
    set -e

    tmp=$(mktemp)
    find . -name '*.flac' -exec sh -c 'echo -n "{};"; metaflac --export-tags-to=- "{}" | tr "\n" ";"; echo' \; | column -t -s\; -o\; | sort > "$tmp"
    vim "$tmp"
    cat "$tmp" | while read -r line; do
        file=$(echo "$line" | sed -e "s/\s*;.*$//g")
        tags=$(echo "$line" | sed -e "s/^[^;]*;//" -e "s/\s*;/\n/g")
        echo "$tags" | metaflac --remove-all-tags --import-tags-from=- "$file"
    done
)}

func-desc dbxfs "Mount Dropbox"
