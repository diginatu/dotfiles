source ~/dotfiles/shell/shell_common.sh

bindkey -e

HISTFILE=~/.history
readonly local shared_hist_file=~/share/share-configs/home/dotfiles/history
if [[ -f $shared_hist_file ]]; then
    HISTFILE=$shared_hist_file
fi
HISTSIZE=50000
SAVEHIST=50000
setopt hist_ignore_dups          # Don't record an entry that was just recorded again.
setopt bang_hist                 # Treat the '!' character specially during expansion.
setopt extended_history          # Write the history file in the ":start:elapsed;command" format.
setopt hist_expire_dups_first    # Expire duplicate entries first when trimming history.
setopt hist_ignore_space         # Don't record an entry starting with a space.
setopt hist_save_no_dups         # Don't write duplicate entries in the history file.
setopt hist_reduce_blanks        # Remove superfluous blanks before recording entry.
setopt inc_append_history        # Immediately append to the history file, not just when a term is killed
setopt append_history            # Append history to the history file (no overwriting)
setopt share_history             # Share history across sessions
zstyle :compinstall filename '~/.zshrc'

DIRSTACKSIZE=100
disable r

# Enable cdr, add-zsh-hook
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs

# cdr
zstyle ':completion:*' recent-dirs-insert both
zstyle ':chpwd:*' recent-dirs-max 500
zstyle ':chpwd:*' recent-dirs-default true

# History
bindkey "^r" history-incremental-pattern-search-backward
bindkey "^s" history-incremental-pattern-search-forward
autoload -Uz history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^n" history-beginning-search-forward-end
bindkey "^p" history-beginning-search-backward-end

autoload -Uz edit-command-line
zle -N edit-command-line
bindkey '^f' edit-command-line

# execution without the command
alias -s rb='ruby'
alias -s py='python'
alias -s php='php -f'

setopt print_eight_bit
setopt globdots
# correct spell
setopt correct
setopt AUTO_PUSHD
# enable comments in interactive terminal
setopt interactivecomments

autoload -Uz colors; colors

# completions
zstyle ':completion:*' menu select=2
zstyle ':completion:*' verbose yes
zstyle ':completion:*' completer _ssh _complete _match _approximate _prefix _list _expand _history
zstyle ':completion:*:messages' format ${fg_bold[yellow]}'%d'${reset_color}
zstyle ':completion:*:warnings' format ${fg[red]}'No matches for:'${fg[yellow]}' %d'${reset_color}
zstyle ':completion:*:descriptions' format ${fg[yellow]}'%B%d%b'${reset_color}
zstyle ':completion:*:corrections' format ${fg_bold[yellow]}'%B%d '${fg[red]}'(errors: %e)%b'${reset_color}
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' use-cache true
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:cd:*' ignore-parents parent pwd
zstyle ':completion:*:*files' ignored-patterns '*?.o' '*?~' '*\#'
export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}


# ----- PROMPT -----

prompt_symbol() {
    # check_last_exit_code
    if [[ $? -eq 0 ]]; then
        echo ">"
    else
        echo "%{$fg[red]%}>%{$reset_color%}"
    fi
}

check_user_and_host() {
    if (( ${+SSH_CONNECTION} )); then
        user_and_host_name=$USER@$HOST
    fi
}

PROMPT=$'\n${fg[blue]}%~${reset_color} ${vcs_info_msg_0_} ${user_and_host_name}\n$(prompt_symbol) '

setopt prompt_subst # evaluate prompt every time
autoload -Uz vcs_info
zstyle ':vcs_info:git:*' check-for-changes true
zstyle ':vcs_info:git:*' stagedstr "%F{yellow}!"
zstyle ':vcs_info:git:*' unstagedstr "%F{red}+"
zstyle ':vcs_info:*' formats "%F{green}%c%u%b%f"
zstyle ':vcs_info:*' actionformats "%F{green}%c%u%b|%a%f"
precmd () { vcs_info ; check_user_and_host }

# ----- Functions ------

## Definition search
DEFINITION_LIST=""
DEFINITION_LIST_DELIMITER=" # "
func-desc() {
    DEFINITION_LIST+="$1$DEFINITION_LIST_DELIMITER$2\n"
}

# zmv
autoload -Uz zmv

# Plugins
if [[ -f ~/.zplug/init.zsh ]]; then
    source ~/.zplug/init.zsh
    #zplug mafredri/zsh-async, from:github
    #zplug sindresorhus/pure, use:pure.zsh, from:github, as:theme
    zplug load

    # Pure theme
    PURE_PROMPT_SYMBOL='>'
    RPROMPT=''
else
    autoload -Uz compinit
    compinit
fi

# fzf
if [[ -f ~/.fzf.zsh ]]; then
    source ~/.fzf.zsh
fi
if type fzf > /dev/null; then
    if type 'fzf-tmux' > /dev/null; then
        alias fzf='fzf-tmux -p 70%'
    fi

    if [[ -f /usr/share/fzf/key-bindings.zsh ]]; then
        source /usr/share/fzf/key-bindings.zsh
    fi
    if [[ -f /usr/share/fzf/completion.zsh ]]; then
        source /usr/share/fzf/completion.zsh
    fi

    export FZF_DEFAULT_OPTS='--reverse --bind "ctrl-j:abort,space:toggle+down" --height=50%'
    export FZF_CTRL_T_OPTS="--preview '(bat --paging never -r :50 --decorations never --color always {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -100'"
    export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:7:hidden:wrap --bind '?:toggle-preview'"

    ## Definition search
    def-search() {
        BUFFER=$(echo -n $DEFINITION_LIST | fzf --preview='. ~/.zshrc && type -f {1}')
    }
    zle -N def-search
    bindkey "^o" def-search

    ## cd
    func-desc pr "Recursive cd"
    function pr {
        eval local selected_dir=$(find . -type d 2>/dev/null | fzf)
        if [[ -n $selected_dir ]]; then
            cd "${selected_dir}"
        fi
    }
    func-desc ph "cd from pwd history"
    function ph {
        eval local selected_dir=$(cdr -l | tr -s ' ' | cut -d ' ' -f 2 | fzf)
        if [[ -n $selected_dir ]]; then
            if [[ -d $selected_dir ]]; then
                cd "${selected_dir}"
            else
                echo "No such a directory: ${selected_dir}.  Deleted."
                cdr -P "${selected_dir}"
                ph
            fi
        fi
    }

    ## git
    func-desc gsw "Switch git branches interactively"
    gsw() {
        major_branches=$(git branch -a -l main master develop | sed 's/^../^/; s/$/\\s/' | sed ':a; N; s/\n/|/; ta')
        all_branches=$(git branch -a -vv | sed 's/^..//')
        cat <(echo "$all_branches" | grep -E "$major_branches") <(echo "$all_branches" | grep -vE "/HEAD\s|$major_branches") | fzf | sed 's/^\([^ ]*\)\s.*$/\1/; s#^remotes/[^/]*/##' | xargs git switch
    }

    # completions
    _fzf_complete_pass() {
        _fzf_complete +m -- "$@" < <(
        local prefix
        prefix="${PASSWORD_STORE_DIR:-$HOME/.password-store}"
        command find -L "$prefix" \
            -name "*.gpg" -type f | \
            sed -e "s#${prefix}/\{0,1\}##" -e 's#\.gpg##' -e 's#\\#\\\\#' | sort
        )
    }
fi

# Man page using vim
func-desc vman "Open man page using vim"
vman() {
    if [ -z $1 ]; then
        echo "What manual page do you want?"
        return 1
    fi
    vim "-c Man $1 | only"
}

# Dev Docker
func-desc dev "Start development environment docker continer"
dev() {
    docker run --rm -it diginatu/dev-base:latest
}
func-desc dev-mount "Start development environment docker continer with mounting current directory"
dev-mount() {
    docker run --rm -v "$(pwd):/root/code" -it diginatu/dev-base:latest
}

func-desc ghurl "Execute multiple lines in each tmux panes"
xpanes() {(
    set -e

    declare -a lines; lines=( "${(f@)$(cat)}" )
    echo ${#lines[@]}
    echo ${lines}

    if [ -z "$lines" ]; then
        return 1
    fi
    tmux new-window $lines[1]

    for l in ${lines[@]:1}; do
        tmux split-window -p 100 $l
    done

    tmux select-layout tiled
    tmux set synchronize-panes on
)}

func-desc ghurl "Print github web site URL"
ghurl() {(
    set -e

    origin=$(git ls-remote --get-url origin)
    url="$origin"
    if [[ "$origin" =~ '^git' ]]; then
        url=$(echo "$origin" | sed -Ee 's@:@/@' -e 's#(git@|git://)#https://#')
    fi
    url=${url%\.git}

    echo "$url"
)}

func-desc ghopen "Open github web site"
ghopen() {
    open $(ghurl)
}
